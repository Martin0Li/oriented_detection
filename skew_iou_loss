# -*- encoding: utf-8 -*-
"""
@File    : torch_final.py
@Time    : 2021/5/28 12:11
@Author  : Martin_Li
@Email   : 785415704@qq.com
@Software: PyCharm
"""

import torch
import torch.nn.functional as F
import cv2
import numpy as np
import matplotlib.pyplot as plt
import os
import shutil
import time
import shapely
from shapely.geometry import Polygon, MultiPoint  # 多边形


def vector_product(vector_a, vector_b):
    return vector_a[0] * vector_b[1] - vector_b[0] * vector_a[1]


def generate_point(scale):
    # box_size = np.random.uniform((scale, 2), high=640)
    point1_abcd = torch.rand(size=(scale, 4))
    point2_abcd = torch.rand(size=(scale, 4))

    box_size = torch.rand(size=[scale, 2]) * 640
    # point1_abcd = np.random.uniform([scale, 4], high=1)
    # point2_abcd = np.random.uniform([scale, 4], high=1)
    # box_size = torch.zeros((scale, 2), dtype=torch.float32)
    # point1_abcd = torch.ones((scale, 4), dtype=torch.float32)
    # point2_abcd = torch.ones((scale, 4), dtype=torch.float32)
    return [box_size, point1_abcd, point2_abcd]


def bbox_iou_eval(boxes1, boxes2):
    ious = []
    for i in range(boxes2.shape[0]):
        box1 = np.array(boxes1[i]).reshape(4, 2)  # 四边形二维坐标表示
        # python四边形对象，会自动计算四个点，并将四个点重新排列成
        # 左上，左下，右下，右上，左上（没错左上排了两遍）
        poly1 = Polygon(box1).convex_hull
        box2 = np.array(boxes2[i]).reshape(4, 2)
        poly2 = Polygon(box2).convex_hull

        if not poly1.intersects(poly2):  # 如果两四边形不相交
            iou = 0
        else:
            try:
                inter_area = poly1.intersection(poly2).area  # 相交面积
                iou = float(inter_area) / (poly1.area + poly2.area - inter_area)
            except shapely.geos.TopologicalError:
                print('shapely.geos.TopologicalError occured, iou set to 0')
                iou = 0
        ious.append(iou)
    return 1.0 - np.array(ious, dtype=np.float32)


def iou_rotate_calculate2(boxes1, boxes2):
    ious = []
    if boxes1.shape[0] != 0:
        for i in range(boxes1.shape[0]):

            boxes1_ = cv2.minAreaRect(np.reshape(boxes1[i], (4, 2)))
            boxes2_ = cv2.minAreaRect(np.reshape(boxes2[i], (4, 2)))
            area1 = boxes1_[1][0] * boxes1_[1][1]
            area2 = boxes2_[1][0] * boxes2_[1][1]
            temp_ious = []
            r1 = boxes1_
            r2 = boxes2_

            int_pts = cv2.rotatedRectangleIntersection(r1, r2)[1]
            if int_pts is not None:
                order_pts = cv2.convexHull(int_pts, returnPoints=True)
                int_area = cv2.contourArea(order_pts)
                inter = int_area * 1.0 / (area1 + area2 - int_area + 1e-4)
                inter = max(0.0, min(1.0, inter))
                temp_ious.append(inter)
            else:
                temp_ious.append(0.0)
            ious.append(temp_ious)

    return 1.0 - np.array(ious, dtype=np.float32)


def ious_compute(point1_abcd, point2_abcd, box_size):
    point1_abcd = torch.where(point1_abcd >= 1, torch.full_like(point1_abcd, 0.999), point1_abcd)
    point1_abcd = torch.where(point1_abcd < 0, torch.full_like(point1_abcd, 0.0000001), point1_abcd)

    point2_abcd = torch.where(point2_abcd >= 1, torch.full_like(point1_abcd, 0.999), point2_abcd)
    point2_abcd = torch.where(point2_abcd < 0, torch.full_like(point1_abcd, 0.0000001), point2_abcd)

    box_size = F.relu(box_size)+10                           # todo 这里用的是标签的box尺寸，有奇异值，有可能box是0
    # box_size = torch.where(box_size == 0, torch.full_like(point1_abcd, 1), box_size)

    point1_abcd = torch.reshape(point1_abcd, (-1, 4))
    point2_abcd = torch.reshape(point2_abcd, (-1, 4))

    box_size = torch.reshape(box_size, (-1, 2)).to(torch.float32)
    box_size = torch.floor(box_size)

    x1 = torch.unsqueeze(box_size[:, 0] * point1_abcd[:, 0], dim=-1)
    y1 = torch.unsqueeze(torch.zeros_like(point1_abcd[:, 1]), dim=-1)
    x2 = torch.unsqueeze(box_size[:, 0], dim=-1)
    y2 = torch.unsqueeze(box_size[:, 1] * point1_abcd[:, 1], dim=-1)
    x3 = torch.unsqueeze((1 - point1_abcd[:, 2]) * box_size[:, 0], dim=-1)
    y3 = torch.unsqueeze(box_size[:, 1], dim=-1)
    x4 = torch.unsqueeze(torch.zeros_like(point1_abcd[:, 1]), dim=-1)
    y4 = torch.unsqueeze((1 - point1_abcd[:, 3]) * box_size[:, 1], dim=-1)
    point1 = torch.cat([x1, y1, x2, y2, x3, y3, x4, y4], -1)+20
    point1 = torch.floor(point1)

    a1, b1, c1, d1, e1, f1 = point1[:, 0], point1[:, 1], point1[:, 2], point1[:, 3], point1[:, 4], point1[:, 5]    # 计算标签结果的面积
    square1 = torch.abs(a1 * d1 + b1 * e1 + c1 * f1 - a1 * f1 - b1 * c1 - d1 * e1) / torch.FloatTensor([2.0])
    a1, b1, c1, d1, e1, f1 = point1[:, 0], point1[:, 1], point1[:, 4], point1[:, 5], point1[:, 6], point1[:, 7]
    square1 = square1 + torch.abs(a1 * d1 + b1 * e1 + c1 * f1 - a1 * f1 - b1 * c1 - d1 * e1) / torch.FloatTensor([2.0])

    x1 = torch.unsqueeze(box_size[:, 0] * point2_abcd[:, 0], dim=-1)
    y1 = torch.unsqueeze(torch.zeros_like(point2_abcd[:, 1]), dim=-1)
    x2 = torch.unsqueeze(box_size[:, 0], dim=-1)
    y2 = torch.unsqueeze(box_size[:, 1] * point2_abcd[:, 1], dim=-1)
    x3 = torch.unsqueeze((1 - point2_abcd[:, 2]) * box_size[:, 0], dim=-1)
    y3 = torch.unsqueeze(box_size[:, 1], dim=-1)
    x4 = torch.unsqueeze(torch.zeros_like(point2_abcd[:, 1]), dim=-1)
    y4 = torch.unsqueeze((1 - point2_abcd[:, 3]) * box_size[:, 1], dim=-1)
    point2 = torch.cat([x1, y1, x2, y2, x3, y3, x4, y4], -1) + 20
    point2 = torch.floor(point2)

    a2, b2, c2, d2, e2, f2 = point2[:, 0], point2[:, 1], point2[:, 2], point2[:, 3], point2[:, 4], point2[:, 5]    # 计算预测结果的面积
    square2 = torch.abs(a2 * d2 + b2 * e2 + c2 * f2 - a2 * f2 - b2 * c2 - d2 * e2) / torch.FloatTensor([2.0])
    a2, b2, c2, d2, e2, f2 = point2[:, 0], point2[:, 1], point2[:, 4], point2[:, 5], point2[:, 6], point2[:, 7]
    square2 = square2 + torch.abs(a2 * d2 + b2 * e2 + c2 * f2 - a2 * f2 - b2 * c2 - d2 * e2) / torch.FloatTensor([2.0])

    point = torch.cat([point1.unsqueeze(1), point2.unsqueeze(1)], 1)
    point_array = torch.diag_embed(point)
    select_array = torch.FloatTensor([[1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1]])
    point_array = torch.matmul(select_array, point_array)
    line_array = torch.cat([torch.unsqueeze(point_array[:, :, 0, :4], dim=-2), torch.unsqueeze(point_array[:, :, 1, 2:6], dim=-2)
                    , torch.unsqueeze(point_array[:, :, 2, 4:], dim=-2), torch.unsqueeze(torch.cat([point_array[:, :, 3, 6:]
                    , point_array[:, :, 3, :2]], -1), dim=-2)], -2)

    ZERO, sum_result = 1e-9, []      # 获取两两相交的边
    for i in range(4):
        A = [line_array[:, 0, i, 0:1], line_array[:, 0, i, 1:2]]
        B = [line_array[:, 0, i, 2:3], line_array[:, 0, i, 3:4]]
        C = [line_array[:, 1, :, 0], line_array[:, 1, :, 1]]
        D = [line_array[:, 1, :, 2], line_array[:, 1, :, 3]]
        AC = [C[0] - A[0], C[1] - A[1]]
        AD = [D[0] - A[0], D[1] - A[1]]
        BC = [C[0] - B[0], C[1] - B[1]]
        BD = [D[0] - B[0], D[1] - B[1]]
        CA = [A[0] - C[0], A[1] - C[1]]
        DA = [A[0] - D[0], A[1] - D[1]]
        CB = [B[0] - C[0], B[1] - C[1]]
        DB = [B[0] - D[0], B[1] - D[1]]
        result = torch.where((vector_product(AC, AD) * vector_product(BC, BD) <= ZERO)
                             &
                             (vector_product(CA, CB) * vector_product(DA, DB) <= ZERO), 1, 0)
        result = torch.unsqueeze(result, dim=1)
        sum_result.append(result)
    sum_result = torch.cat(sum_result, 1).float()
    diag = torch.diag_embed(sum_result)

    f = line_array.unsqueeze(3).repeat(1, 1, 1, 4, 1)
    b = torch.reshape(torch.matmul(diag, f[:, 0]), (-1, 16, 4))
    c = torch.matmul(diag.transpose(0, 1), line_array[:, 1]).transpose(0, 1).reshape(-1, 16, 4)

    x1, y1, x2, y2 = b[..., 0], b[..., 1], b[..., 2], b[..., 3]
    x3, y3, x4, y4 = c[..., 0], c[..., 1], c[..., 2], c[..., 3]

    x_a = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4)
    x_a[x_a == 0.0] = torch.FloatTensor([-1.0])
    x_b = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4)
    x_b[x_b == 0.0] = torch.FloatTensor([1.0])
    y_a = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4)
    y_a[y_a == 0.0] = torch.FloatTensor([-1.0])
    y_b = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4)
    y_b[y_b == 0.0] = torch.FloatTensor([1.0])
    x, y = x_a/x_b, y_a/y_b
    ori_res = torch.cat([x.unsqueeze(-1), y.unsqueeze(-1)], -1)
    ori_res = ori_res * torch.unsqueeze((1.0 - torch.where(ori_res[..., 0] * ori_res[..., 1] < 0,  torch.FloatTensor([1.0]), torch.FloatTensor([0.0]))), dim=-1) \
              - torch.unsqueeze(torch.where(ori_res[..., 0] * ori_res[..., 1] < 0, torch.FloatTensor([1.0]), torch.FloatTensor([0.0])), dim=-1)

    ori_res = torch.cat([-1 * torch.ones((batchsize, 4, 2)), ori_res], dim=1)

    # 去重
    temp_y = ori_res.unsqueeze(2).repeat(1, 1, 20, 1)
    temp_x = ori_res.unsqueeze(1).repeat(1, 20, 1, 1)
    temp_abs = torch.abs(temp_x - temp_y)
    temp_xy = torch.where(temp_abs < 0.001, 1, 0)
    temp_xy = temp_xy[:, :, :, 0] * temp_xy[:, :, :, 1]
    bias = torch.where(torch.sum(torch.triu(temp_xy, diagonal=0), -1) == 1, 1, 0)
    bias = bias * torch.where(torch.sum(ori_res, -1) == -2, 0, 1)
    duplicate_removal = ori_res * bias.unsqueeze(-1).float()
    duplicate_removal[duplicate_removal == 0.0] = torch.FloatTensor([-1.0])
    sum_result = torch.reshape(bias, (-1, 5, 4))

    # 计算重心坐标
    vaild_point = duplicate_removal
    n = torch.sum(torch.where(torch.sum(vaild_point, -1) > 0, 1, 0), -1)
    n[n == 0] = 1
    center_point = torch.sum(vaild_point, -2) / n.unsqueeze(-1).float()
    center_point = center_point.unsqueeze(1).repeat(1, 20, 1)

    # 对一条线上有两个交点的情况进行排序  problem
    point2_sum = sum_result * torch.where(torch.sum(sum_result, -1) == 2, 1, 0).unsqueeze(-1)
    may_change = torch.arange(20).unsqueeze(0).repeat(batchsize, 1) * torch.reshape(point2_sum, (-1, 20))
    may_change_argsort = torch.argsort(may_change)

    may_change = torch.matmul(torch.nn.functional.one_hot(may_change_argsort, 20), may_change.unsqueeze(-1)).unsqueeze(-1).float()
    may_change = may_change.reshape(-1, 10, 2)
    change = torch.nn.functional.one_hot(may_change.long(), 20).float()

    ord = torch.FloatTensor([[0, 1]]).repeat(10, 1).unsqueeze(0).repeat(batchsize, 1, 1)
    index = torch.where(torch.sum(duplicate_removal, -1) > 0, torch.FloatTensor([1.0]), torch.FloatTensor([0.0]))
    vector = index.unsqueeze(-1) * (center_point - duplicate_removal)  # 求每个点对应的向量
    vector = vector.unsqueeze(1).repeat(1, 10, 1, 1)
    vector = torch.reshape(torch.matmul(change, vector), (-1, 10, 4)) \
             * torch.where(torch.sum(may_change, axis=-1) > 0, torch.FloatTensor([1.0]), torch.FloatTensor([0.0])).unsqueeze(-1)  # 求可能需要变化顺序的向量
    vector = torch.reshape(vector, (-1, 10, 2, 2))
    vector = vector[:, :, 0, 0] * vector[:, :, 1, 1] - vector[:, :, 0, 1] * vector[:, :, 1, 0]  # 向量叉乘,小于0，则两个点互换
    sort_index = torch.where(vector < 0.0, 1.0, 0.0).unsqueeze(-1) - ord
    sort_index[sort_index == -1.0] = 1.0
    sort_index = torch.nn.functional.one_hot(sort_index.long(), 2).float()
    # 把需要交换位置的索引互换位置
    change = torch.reshape(torch.matmul(sort_index, may_change.unsqueeze(-1)), (-1, 20))
    change_index = torch.nn.functional.one_hot(change.long(), 20).float()
    change_index = torch.matmul(sort_index, change_index.view(-1, 10, 2, 20))
    change = change_index.view(-1, 20, 20) * change.unsqueeze(-1).repeat(1, 1, 20)
    change = torch.sum(change, 1)
    # 把有改变的索引放入全部索引中
    change = change + torch.arange(20) * torch.where(change == 0.0, 1.0, 0.0)
    change = torch.nn.functional.one_hot(change.long(), 20).float()
    res = torch.matmul(change, duplicate_removal)
    # 把-1的部分移到前面去
    sort_index = torch.nn.functional.one_hot(torch.argsort(torch.arange(20) * torch.where(torch.sum(res, -1) == -2.0, 0, 1)), 20).float()
    res = torch.matmul(sort_index, res)[:, 4:, :]

    # 计算面积
    try_a = torch.sum(torch.where(torch.sum(res, 2) == -2, 1, 0), 1).long()
    index = torch.matmul(torch.matmul(torch.nn.functional.one_hot(try_a, 16).float().unsqueeze(1)
         , torch.triu(torch.ones((16, 16)), diagonal=2)).transpose(1, 2)
          , torch.nn.functional.one_hot(try_a, 16).float().unsqueeze(1))
    p = torch.matmul(torch.nn.functional.one_hot(try_a, 16).float().unsqueeze(1), torch.triu(torch.ones((16, 16)), diagonal=2))
    index2 = torch.diag_embed(p)
    index1 = torch.cat([index2[:, :, :, 1:], torch.unsqueeze(index2[:, :, :, 0], dim=-1)], -1)
    index = torch.cat([torch.unsqueeze(index, dim=1), index1, index2], 1)
    index = torch.reshape(index, (-1, 48, 16))
    res = torch.reshape(torch.matmul(index, res), (-1, 3, 16, 2)).transpose(1, 2)

    a, b, c, d, e, f = res[:, :, 0, 0], res[:, :, 0, 1], res[:, :, 1, 0], res[:, :, 1, 1], res[:, :, 2, 0], res[:, :, 2, 1]
    square = torch.sum(torch.abs(a * d + b * e + c * f - a * f - b * c - d * e) / torch.FloatTensor([2.0]), 1)
    fin_res = 1.0 - torch.minimum(square / (square1 + square2 - square), torch.FloatTensor([1.0]))
    print(fin_res)
    # fin_res = torch.where(fin_res > 0.99, 0.5, fin_res)
    # print(torch.where(fin_res > torch.cast(1.0, dtype=torch.float32)).numpy())
    # fin_res = torch.where(fin_res < 0.0, 0.5, fin_res)
    # print(torch.where(fin_res < torch.cast(0.0, dtype=torch.float32)).numpy())
    # fin_res = torch.where(torch.abs(torch.constant(1.0) - fin_res) < 0.1, 0.0, torch.constant(1.0) - fin_res)
    # print(fin_res)
    # print(torch.where(torch.math.is_inf(fin_res)))
    # list_array = torch.concat([torch.unsqueeze(fin_res, axis=-1), point1_abcd, point2_abcd, box_size, torch.unsqueeze(square1, axis=-1)
    #                            , torch.unsqueeze(square2, axis=-1), torch.unsqueeze(square, axis=-1)], axis=1).numpy()

    fin_res_stand = bbox_iou_eval(point1.numpy(), point2.numpy())

    if os.path.exists('./show/'):
        shutil.rmtree('./show/')
    os.mkdir('./show/')
    point1, point2, map_size, fin_res, square, square1, square2 = point1.numpy(), point2.numpy(), box_size.numpy()+50, fin_res.numpy()\
        , square.numpy(), square1.numpy(), square2.numpy()
    sum_str = ""
    for i in range(batchsize):
        plot = np.zeros(np.array([map_size[i][1], map_size[i][0], 3], dtype=np.int))

        cv2.line(plot, (point2[i][0], point2[i][1]), (point2[i][2], point2[i][3]), (0, 255, 0), 3)
        cv2.line(plot, (point2[i][2], point2[i][3]), (point2[i][4], point2[i][5]), (0, 255, 0), 3)
        cv2.line(plot, (point2[i][4], point2[i][5]), (point2[i][6], point2[i][7]), (0, 255, 0), 3)
        cv2.line(plot, (point2[i][6], point2[i][7]), (point2[i][0], point2[i][1]), (0, 255, 0), 3)

        cv2.line(plot, (point1[i][0], point1[i][1]), (point1[i][2], point1[i][3]), (0, 0, 255), 3)
        cv2.line(plot, (point1[i][2], point1[i][3]), (point1[i][4], point1[i][5]), (0, 0, 255), 3)
        cv2.line(plot, (point1[i][4], point1[i][5]), (point1[i][6], point1[i][7]), (0, 0, 255), 3)
        cv2.line(plot, (point1[i][6], point1[i][7]), (point1[i][0], point1[i][1]), (0, 0, 255), 3)

        sum_str += str(map_size[i][0]) + str(map_size[i][1]) + str(point1[i]) + str(point2[i]) + str(square1[i]) + str(square2[i]) + str(fin_res[i]) + str(fin_res_stand[i]) + '\n'

        plot = np.array(plot, dtype=np.float32)
        plt.figure()
        plt.imshow(plot/255.0)
        plt.title('iou: ' + str(fin_res[i]) + 'standard:' + str(fin_res_stand[i]))
        plt.savefig('./show/' + str(i+1) + '.png')
        plt.close()

    with open('detail.txt', 'w') as f:
        f.write(sum_str)
    print(np.sum(np.abs(fin_res - fin_res_stand))/batchsize)
    # a = list_array[torch.where(fin_res < torch.cast(0.0, dtype=torch.float32)).numpy()]
    # a = np.reshape(a, (-1, 14))
    # print(a.shape[0])
    # np.savetxt("filename.txt", a)
    # b = list_array[torch.where(fin_res > torch.cast(1.0, dtype=torch.float32)).numpy()]
    # b = np.reshape(b, (-1, 14))
    # print(b.shape[0])
    # np.savetxt("filename1.txt", b)
    return fin_res


batchsize = 20

if __name__ == '__main__':

    box_size, point1_abcd, point2_abcd = generate_point(batchsize)
    # box_size = torch.constant([[401.0, 618.0]], dtype=torch.float32)
    # point1_abcd = torch.constant([[36., 10., 371., 379., 110., 588., 10., 587.]], dtype=torch.float32)
    # point2_abcd = torch.constant([[10., 10., 371., 379., 110., 588., 10., 587.]], dtype=torch.float32)
    result = ious_compute(point1_abcd, point2_abcd, box_size)
    result = np.sum(result)
    # print(result)









